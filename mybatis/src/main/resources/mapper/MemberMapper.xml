<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ksmart.mybatis.mapper.MemberMapper">
	<resultMap type="Member" id="memberResultMap">
		<id 	column="m_id" 		property="memberId"/>
		<result column="m_pw" 		property="memberPw"/>
		<result column="m_name" 	property="memberName"/>
		<result column="m_level" 	property="memberLevel"/>
		<result column="m_email" 	property="memberEmail"/>
		<result column="m_addr" 	property="memberAddr"/>
		<result column="m_reg_date" property="memberRegDate"/>
		
		<association property="levelInfo" javaType="MemberLevel"> <!-- db에  -->
			<id 	column="level_num" 		property="levelNum"/>
			<result column="level_name" 	property="levelName"/>
			<result column="level_reg_date" property="levelRegDate"/>
		</association>
		<collection property="goodsList" ofType="Goods">
			<id 	column="g_code" 		property="goodsCode"/>
			<result column="g_name" 		property="goodsName"/>
			<result column="g_price" 		property="goodsPrice"/>
			<result column="g_seller_id" 	property="goodsSellerId"/>
			<result column="g_reg_date" 	property="goodsRegDate"/>
			
		</collection>
	</resultMap>
	
	<select id="getLoginHistory" parameterType="map" resultType="map"> <!-- type사용 -> map을 사용하려면 위에서 정의해야함 -->
		SELECT
			 l.login_num		AS loginNum
			,l.login_id			AS loginId
			,l.login_date		AS loginDate
			,l.logout_date		AS logoutDate
		FROM
			tb_login AS l
		LIMIT #{startRow}, #{rowPerPage};
	</select>
	
	
	<select id="getLoginHistoryCount" resultType="int">
		SELECT
			COUNT(l.login_num)
		FROM 
			tb_login AS l	
	</select>
	
	
	<!-- 판매자 자신의 상품목록 조회 -->
	<select id="getResisInfoList" fetchSize="100" resultMap="memberResultMap">
		SELECT 
			m.m_id
			,g.g_code
			,g.g_name
			,g.g_price
			,g.g_reg_date		
		FROM 
			tb_member AS m
			INNER JOIN 
			tb_goods AS g
			ON 
			m.m_id = g.g_seller_id
		ORDER BY m.m_id, g.g_code;			
	</select>
	
	<select id="getSellerInfoList" fetchSize="100" resultMap="memberResultMap">
		SELECT
			 m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
			,g.g_code
			,g.g_name
			,g.g_price
			,g.g_reg_date
		FROM
			tb_member AS m
			INNER join
			tb_goods AS g
			ON 
			m.m_id = g.g_seller_id
		ORDER BY m.m_id, g.g_code;
	</select>
	
	<!-- 회원 상세목록 조회 -->
	<select id="getMemberInfoList" fetchSize="100" resultMap="memberResultMap">
		SELECT
			 m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
			,l.level_num
			,l.level_name
			,l.level_reg_date
		FROM
			tb_member AS m
			INNER join
			tb_member_level AS l
			ON 
			m.m_level = l.level_num
		ORDER BY m.m_id;
	</select>
	
	<select id="getSearchMemberList" fetchSize="1000" parameterType="String" resultMap="memberResultMap">
		SELECT
		 	 m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
		FROM 
			tb_member AS m
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchValue != null and searchValue != ''">
				${searchKey} LIKE CONCAT('%', #{searchValue}, '%');
			</if>
		</trim>
	</select>
	
	<delete id="removeMemberById" parameterType="String">
		/*tb_member (회원 탈퇴)*/
		DELETE
		FROM
			tb_member
		WHERE
			m_id = #{memberId};
	
	</delete>
	
	<delete id="removeLoginHistoryById" parameterType="String">
		/*tb_login (회원이 로그인한 이력 삭제)*/
		DELETE
		FROM
			tb_login
		WHERE
			login_id = #{memberId};		
	</delete>
	
	<delete id="removeOrderByGCode" parameterType="String">
		/*tb_order (구매자 구매한 주문내역 삭제)*/
		DELETE
		FROM
			tb_order
		WHERE 
			o_id = #{memberId};	
	</delete>
	
	<delete id="removeGoodsById" parameterType="String">
		/*tb_goods (판매자 등록한 상품 목록 삭제)*/
		DELETE
		FROM
			tb_goods
		WHERE
			g_seller_id = #{memberId};	
	</delete>
	
	<delete id="removeGoodsBycode" parameterType="String">
		/*tb_order (상품코드에 연관된 튜플삭제)*/
		DELETE
			o
		FROM
			tb_goods AS g
			INNER JOIN
			tb_order AS o
			ON
			g.g_code = o.o_g_code
		where
			g.g_seller_id = #{memberId};			
	
	</delete>
	
	<update id="modifyMember" parameterType="Member">
		UPDATE tb_member
		<trim prefix="SET" prefixOverrides=",">
			<if test="memberPw != null and memberPw != ''">
				m_pw = #{memberPw}
			</if>
			<if test="memberName != null and memberName != ''">
				,m_name = #{memberName}
			</if>
			<if test="memberLevel != null and memberLevel != ''">
				,m_level = #{memberLevel}
			</if>
			<if test="memberEmail != null and memberEmail != ''">
				,m_email = #{memberEmail}
			</if>
			<if test="memberAddr != null and memberAddr != ''">
				,m_addr = #{memberAddr}
			</if>
		</trim>
		WHERE 
			m_id = #{memberId};
	</update>
	
	
	<select id="getMemberInfoById" parameterType="String" resultMap="memberResultMap">
		SELECT
		 	m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
		FROM 
			tb_member AS m
		WHERE 
			m.m_id = #{memberId};
	
	</select>

	<insert id="addMember" parameterType="Member">
		/* 회원 가입 */
		INSERT INTO tb_member
		(	
			 m_id
			,m_pw
			,m_name
			,m_level
			,m_email
			,m_addr
			,m_reg_date
		)VALUES(
			 #{memberId}
			,#{memberPw}
			,#{memberName}
			,#{memberLevel}
			,#{memberEmail}
			,#{memberAddr}
			,CURDATE()
		);
		
	</insert>


	<select id="getMemberLevelList" resultType="MemberLevel">
		/*회원등급목록 조회*/
		SELECT 
			l.level_num				AS levelNum
			,l.level_name  			AS levelName
			,l.level_reg_date 		AS levelRegdate
		FROM 
			tb_member_level AS l;	
	</select>


	<select id="getMemberList" resultType="Member">
		/* 회원목록 조회 */
 		SELECT 
			m.m_id			AS memberId
			,m.m_pw			AS memberPw
			,m.m_name		AS memberName
			,m.m_level		AS memberLevel
			,m.m_email		AS memberEmail
			,m.m_addr		AS memberAddr
			,m.m_reg_date	AS memberRegDate
		FROM 
			tb_member AS m; 	
		
	</select>
	
</mapper>  
  